//Module Bookstore
//{
//    Entity Book
//    {
//        ShortString Code { AutoCode; }
//        ShortString Title;
//        Integer NumberOfPages;
//
//        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
//        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
//
//        Logging;
//
//    }
//}

//Module Bookstore;
//Entity Bookstore.Book;
//ShortString Bookstore.Book.Code;
//AutoCode Bookstore.Book.Code;
//ShortString Bookstore.Book.Title;
//Integer Bookstore.Book.NumberOfPages;
//ItemFilter Bookstore.Book.CommonMisspelling 'book => book.Title.Contains("curiousity")';
//InvalidData Bookstore.Book.CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
//Logging Bookstore.Book;

Module Bookstore
{
    Entity Book
    {
        ShortString Code { AutoCode; Unique; Required; }
        ShortString Title { Required; }
        Integer NumberOfPages;
        Reference Author Bookstore.Person;

        ItemFilter LongBooks 'item => item.NumberOfPages >= 500';

        ComposableFilterBy LongBooks2 '(query, repository, parameter)=>
        {
            return query.Where(item => item.NumberOfPages >= 500);
        }';

        ComposableFilterBy LongBooks3 '(query, repository, parameter)=>
        {
            var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
            return filtered;
        }';

        FilterBy ComplexSearch '(repository, parameter) => 
        {
            var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                query = query.Where(item => item.Extension_ForeignBook.ID != null);
            Book[] books = query.ToSimple().ToArray();

            if (parameter.MaskTitles == true)
                foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                    book.Title = book.Title.First() + "***" + book.Title.Last();

            return books;
        }';

        ComposableFilterBy 'System.String[]' '(query, repository, titles) => 
        {
            return query.Where(book => titles.Contains(book.Title));
        }';

        ComposableFilterBy 'Bookstore.Person' '(query, repository, author) =>
        {
            return query.Where(book => book.AuthorID == author.ID
                || book.Author.Name == author.Name);
        }';

        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
    }

    Parameter LongBooks2{}
    
    Parameter LongBooks3
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
    }

    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }

    Browse BookGrid Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
        Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
        Take NumberOfTopics 'Extension_BookInfoTopics.NumberOfTopics';
    }

    SqlQueryable BookInfo
        "
            SELECT
                b.ID,
                NumberOfComments = COUNT(c.ID)
            FROM
                Bookstore.Book b
                LEFT JOIN Bookstore.Comment c ON c.BookID = b.ID
            GROUP BY
                b.ID
        "
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }

    SqlQueryable BookInfoTopics
        "
            SELECT
                b.ID,
                NumberOfTopics = COUNT(t.ID)
            FROM
                Bookstore.Book b
                LEFT JOIN Bookstore.BookTopic bt ON b.ID = bt.BookID
                LEFT JOIN Bookstore.Topic t ON bt.TopicID = t.ID
            GROUP BY
                b.ID
        "
    {
        Extends Bookstore.Book;
        Integer NumberOfTopics;

        AutodetectSqlDependencies;
    }

    SqlQueryable BookInfoExternal <SQL\BookInfo.sql>
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }

    Computed ExpectedBookRating 'repository =>
        {
            var books = repository.Bookstore.Book.Query()
                .Select(b =>
                    new
                    {
                        b.ID,
                        b.Title,
                        IsForeign = b.Extension_ForeignBook.ID != null
                    })
                .ToList();

            var ratings = new List<ExpectedBookRating>();
            foreach (var book in books)
            {
                decimal rating = 0;

                if (book.Title?.IndexOf("super", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 100;

                if (book.Title?.IndexOf("great", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 50;

                if (book.IsForeign)
                    rating *= 1.2m;

                ratings.Add(new ExpectedBookRating { ID = book.ID, Rating = rating });
            }

            return ratings.ToArray();
        }'
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }

    Entity Person
    {
        ShortString Name;
    }

    Entity Comment
    {
        Reference Book { Detail; }
        LongString Text;
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }

        ItemFilter LockTopic 'item => item.Name.Contains("Fiction") ||
            item.Name.Contains("History")';
        Lock LockTopic '[Test] Topic contains lock mark.';
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Hardcoded Genre
    {
        LongString ShortDescription;
        Bool Fiction;

        Entry Fantasy
        {
            Value ShortDescription 'Fantasy is a genre of speculative fiction set in a fictional universe';
            Value Fiction 1;
        }

        Entry Crime
        {
            Value ShortDescription 'Suspense and mystery are key elements that are nearly ubiquitous to the genre';
            Value Fiction 0;
        }
    }

    Action Insert5Books
        '(parameter, repository, userInfo) =>
        {
            for (int i = 0; i < 5; i++)
            {
                var newBook = new Bookstore.Book { Code = "+++", Title = "New book" };
                repository.Bookstore.Book.Insert(newBook);
            }
        }';
}