Module Bookstore
{
	Entity Book
	{
	    ShortString Code { AutoCode; Unique; Required; DenyUserEdit;}
        ShortString Title { Required; }
        Integer NumberOfPages;

        Deactivatable { DeactivateOnDelete; }

        Reference Author Bookstore.Person;

        ItemFilter LongBooks 'item => item.NumberOfPages >= 500';

        ComposableFilterBy LongBooks2 '(query, repository, parameter)=>
        {
            return query.Where(item => item.NumberOfPages >= 500);
        }';

        ComposableFilterBy LongBooks3 '(query, repository, parameter)=>
        {
            var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
            return filtered;
        }';

        FilterBy ComplexSearch '(repository, parameter) => 
        {
            var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                query = query.Where(item => item.Extension_ForeignBook.ID != null);
            Book[] books = query.ToSimple().ToArray();

            if (parameter.MaskTitles == true)
                foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                    book.Title = book.Title.First() + "***" + book.Title.Last();

            return books;
        }';

        ComposableFilterBy 'System.String[]' '(query, repository, titles) => 
        {
            return query.Where(book => titles.Contains(book.Title));
        }';

        ComposableFilterBy 'Bookstore.Person' '(query, repository, author) =>
        {
            return query.Where(book => book.AuthorID == author.ID
                || book.Author.Name == author.Name);
        }';

        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
	}
    
    Parameter LongBooks2{}
    
    Parameter LongBooks3
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
    }

    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }
}