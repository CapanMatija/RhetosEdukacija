Module Bookstore
{
    Entity NumberOfReviews
    {
        Extends Bookstore.Book;
        Integer Count;
    }

    Parameter BestReviews{}


    Entity Review
    {
        Reference Book { Required; }
        Integer Score { Required; MinValue 1; MaxValue 5; }
        Longstring Text;

        //RepositoryUses _configuration 'Rhetos.Utilities.Iconfiguration, Rhetos.Utilities';

        //ComposableFilterBy LongReviews '(query, repository, parameter) =>
        //    {
                //int minLength = _configuration.GetInt("Bookstore.LongReviewsMinLength", 10).Value;
        //        int minLength = 10;
        //        return query.Where(r => r.Text.Length >= minLength);
        //    }';

        RepositoryMember BetterReviews
            'public IQueryable<Common.Queryable.Bookstore_Review> BetterReviews(int minScore)
            {
                return this.Query().Where(r => r.Score >= minScore);
            }';

        FilterBy BestReviews '(repository, parameter) =>
            {
                return BetterReviews(4).ToSimple().ToArray();
            }';

        SaveMethod
        {
            LoadOldItems
            {
                Take Score;
                Take 'Book.Title';
            }

            Initialization DefaultTextFromScore
                '
                    foreach (var item in insertedNew)
                        if(string.IsNullOrEmpty(item.Text) && item.Score != null)
                            item.Text = item.Score.Value >=3
                                ? "I like it"
                                : "I don''t like it";
                ';

            OldDataLoaded AppendTextIfScoreChanged
                '
                    var itemsWithModifiedScore = updatedOld
                        .Zip(updatedNew, (oldValue, newValue) => new { oldValue, newValue })
                        .Where(modified => modified.oldValue.Score == null && modified.newValue.Score != null
                            || modified.oldValue.Score != null && !modified.oldValue.Score.Equals(modified.newValue.Score))
                        .ToList();

                    foreach (var item in itemsWithModifiedScore)
                        item.newValue.Text += string.Format(" (changed from {0} to {1})",
                            item.oldValue.Score,
                            item.newValue.Score);
                ';

            OnSaveUpdate UpdateNumberOfReviews
                '
                    var bookIds = insertedNew.Select(review => review.BookID.Value)
                        .Concat(updatedNew.Select(review => review.BookID.Value))
                        .Concat(deletedIds.Select(review => review.BookID.Value))
                        .Distinct().ToList();

                    var numberOfReviews = _domRepository.Bookstore.Book.Query(bookIds)
                        .Select(book => new NumberOfReviews
                        {
                            ID = book.ID,
                            Count = _domRepository.Bookstore.Review.Subquery.Where(r => r.BookID == book.ID).Count()
                        })
                        .ToList();
   
                    var oldRecordIds = _domRepository.Bookstore.NumberOfReviews.Query(bookIds).Select(n => n.ID).ToList();
                    _domRepository.Bookstore.NumberOfReviews.Insert(numberOfReviews.Where(r => !oldRecordIds.Contains(r.ID)));
                    _domRepository.Bookstore.NumberOfReviews.Delete(numberOfReviews.Where(r => oldRecordIds.Contains(r.ID)));
                ';

            OnSaveValidate DenyChangeOfLockedTitle
                '
                    var itemsWithModifiedScore = updatedOld
                        .Zip(updatedNew, (oldValue, newValue) => new { oldValue, newValue })
                        .Where(modified => modified.oldValue.Score == null && modified.newValue.Score != null
                            || modified.oldValue.Score != null && !modified.oldValue.Score.Equals(modified.newValue.Score))
                        .Where(modified => modified.oldValue.BookTitle.IndexOf("lock", StringComparison.InvariantCultureIgnoreCase) >= 0)
                        .FirstOrDefault();

                    if (itemsWithModifiedScore != null)
                        throw new Rhetos.UserException(string.Format(
                            "It is not allowed to modify score ({0} => {1}) for the book \"{2}\" because to contains \"lock\" in the title.",
                            itemsWithModifiedScore.oldValue.Score,
                            itemsWithModifiedScore.newValue.Score,
                            itemsWithModifiedScore.oldValue.BookTitle));
                ';
        }
    }
}